;; -*-lisp-*-
;;
;; Here is a sample .stumpwmrc file

(in-package :stumpwm)

(defcommand reload-config ()
    ()
  (load "~/.config/stumpwm/config"))

(defcommand force-fullscreen ()
    ()
  (when (fullscreen-in-frame-p (current-window))
    (fullscreen))
  (sleep 0.2)
  (vsplit)
  (sleep 0.2)
  (only))

(defun executable-exists-p (program)
  (= 0 (nth-value 2 (uiop:run-program (list "which" program) :ignore-error-status t))))

(define-key *root-map* (kbd "c")
  (cond
    ((executable-exists-p "wezterm") "exec wezterm")
    (t "exec xterm")))

(define-key *root-map* (kbd "e") "exec emacs-open")
(define-key *root-map* (kbd "E") "exec emacs-open-frame")

;; to connect from Emacs: (sly-connect "localhost" "4005")
(ql:quickload "slynk")
(defcommand start-slynk (port) ((:number "The port to open the slynk at "))
  (handler-case
      (slynk:create-server :port port :dont-close t)
    (error ()
      (message "Something's wrong, aborting"))))
(defvar *akn-stumpwm-server-started* nil)
(unless *akn-stumpwm-server-started*
  (start-slynk 4005)
  (setf *akn-stumpwm-server-started* t))

;; ;; change the prefix key to something else
;; (set-prefix-key (kbd "C-z"))

;; ;; prompt the user for an interactive command. The first arg is an
;; ;; optional initial contents.
;; (defcommand colon1 (&optional (initial "")) (:rest)
;;   (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
;;     (when cmd
;;       (eval-command cmd t))))

;; ;; Read some doc
;; (define-key *root-map* (kbd "d") "exec gv")
;; ;; Browse somewhere
;; (define-key *root-map* (kbd "b") "colon1 exec firefox http://www.")
;; ;; Ssh somewhere
;; (define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")
;; ;; Lock screen
;; (define-key *root-map* (kbd "C-l") "exec xlock")

;; ;; Web jump (works for DuckDuckGo and Imdb)
;; (defmacro make-web-jump (name prefix)
;;   `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
;;     (nsubstitute #\+ #\Space search)
;;     (run-shell-command (concatenate 'string ,prefix search))))

;; (make-web-jump "duckduckgo" "firefox https://duckduckgo.com/?q=")
;; (make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

;; ;; C-t M-s is a terrble binding, but you get the idea.
;; (define-key *root-map* (kbd "M-s") "duckduckgo")
;; (define-key *root-map* (kbd "i") "imdb")

;; ;; Message window font
;; (set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

;; ;;; Define window placement policy...

;; ;; Clear rules
;; (clear-window-placement-rules)

;; ;; Last rule to match takes precedence!
;; ;; TIP: if the argument to :title or :role begins with an ellipsis, a substring
;; ;; match is performed.
;; ;; TIP: if the :create flag is set then a missing group will be created and
;; ;; restored from *data-dir*/create file.
;; ;; TIP: if the :restore flag is set then group dump is restored even for an
;; ;; existing group using *data-dir*/restore file.
;; (define-frame-preference "Default"
;;   ;; frame raise lock (lock AND raise == jumpto)
;;   (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
;;   (1 t nil :class "XTerm"))

;; (define-frame-preference "Ardour"
;;   (0 t   t   :instance "ardour_editor" :type :normal)
;;   (0 t   t   :title "Ardour - Session Control")
;;   (0 nil nil :class "XTerm")
;;   (1 t   nil :type :normal)
;;   (1 t   t   :instance "ardour_mixer")
;;   (2 t   t   :instance "jvmetro")
;;   (1 t   t   :instance "qjackctl")
;;   (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

;; (define-frame-preference "Shareland"
;;   (0 t   nil :class "XTerm")
;;   (1 nil t   :class "aMule"))

;; (define-frame-preference "Emacs"
;;   (1 t t :restore "emacs-editing-dump" :title "...xdvi")
;;   (0 t t :create "emacs-dump" :class "Emacs"))
