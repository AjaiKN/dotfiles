#!/usr/bin/env bash

set -euo pipefail
# shellcheck disable=SC2154
trap 's=$?; echo >&2 ": Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

if [ $# -ne 1 ]; then
	echo "Usage: git shelve <BRANCH-NAME>"
	echo
	cat <<-EOF
		Just like magit's magit-branch-shelve, which is described as follows:

		> This command shelves a branch. This is done by deleting the branch, and
		> creating a new reference "refs/shelved/BRANCH-NAME" pointing at the same
		> commit as the branch pointed at. If the deleted branch had a reflog, then
		> that is preserved as the reflog of the new reference.

		> This is useful if you want to move a branch out of sight, but are not ready
		> to completely discard it yet.
	EOF
	exit 1
fi

old=refs/heads/"$1"
new=refs/shelved/"$1"
old_reflog="$(git rev-parse --show-toplevel)"/.git/logs/"$old"
new_reflog="$(git rev-parse --show-toplevel)"/.git/logs/"$new"
set -x

git update-ref "$new" "$old" ''

# rename reflog file
if [ -f "$old_reflog" ]; then
	mkdir -p "${new_reflog%/*}"
	mv "$old_reflog" "$new_reflog"
fi

git config --unset branch."$1".pushRemote || :
git branch -D "$1"
